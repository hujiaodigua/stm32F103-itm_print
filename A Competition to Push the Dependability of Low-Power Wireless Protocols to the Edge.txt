Abstract
1. D-Cube：低成本可靠性测量工具，如端到端延迟、可靠性、功耗以及图形化的展示其实时变化。

一、Introduction
1. 因为低功耗无线传感器网络对网络有可靠性要求，同时希望尽可能的减少传输数据损耗与能源
   损耗，进行这一研究就很有必要。
2. 实验对象为Inriya或TWIST这类大型测试床 (试验床)
3. Same testbed =/> comparable results. (相同的测试床无法获得可比较的结果)
   同一测试床可能因为种种因素导致不同的测试结果
4. Same setup =/> fair comparison. (相同的设置无法获得公平的比较)
   相同的设置因为不同操作系统以及参数过程的细微差别导
   致不同的结果
5. Detailed logs =/> accurate metrics. (详细的日志无法获得准确的指标)
  (1) 测试层的日志消息通常不会在亚毫秒级别上有时间戳，因此不能用于精确地配置延迟
  (2) 日志消息是使用printf指令生成的，它可能会改变协议的时间行为，并破坏协议的功能
6. Performing protocol =/> dependable system. (执行协议并不意味着可靠的系统)
  (1) 应用场景：
      本文介绍了EWSN 2016可靠性竞赛的执行情况和结果，该竞赛旨在通过无线电干扰来衡量
	  最先进的物联网协议的可靠性。我们定义了一个场景，它模拟了传感器网络在工业环境中监
      控离散事件的操作，在这个场景中，多个共存的无线设备都聚集在射频频谱上，并且评估了
      竞争协议如何可靠、及时和高效地向汇聚节点报告这些事件的发生。竞争的物联网协议是基
      于各种技术，包括自适应和延时跳频到多模式路由和洪水，并被选在最先进的技术中。
  (2) 为了增加公平性和真实性，我们允许竞赛协议的开发人员与基准基础设施交互，并为特定
       的应用程序场景优化协议参数。
  (3) D-Cube使用现成组件搭建，它允许准确配置一个设备的功耗，可以确保端到端的延迟在亚微秒
	  级别，并检测特定事件的发生。
7. 这篇论文的收益如下。第2节讨论了该地区的相关工作。第3节概述了竞争的目标，并描述了评估
   指标，以及必要的基准基础设施的需求。我们通过设计D-Cube来解决这些需求，并描述其在第4节
   中的架构和实现，并评估其在第5节中的准确性。我们描述了EWSN 2016可靠性竞争的执行情况以及
   它在第6节中的结果，并讨论了所获得的经验教训。最后，我们总结全文，并简要概述了今后的研究工作。
   
二、Related Work
	1. 其它测试床存在针对协议具有局限性、没能考虑环境影响或者成本过高的问题
	
三、Competition:Overview
	在相同的设置和环境条件下，对不同协议的性能进行评估
	Goals(测试目标)
		创建一个无偏的设置，任何协议都可以在相同的可重现条件下运行
		1. (Realistic scenario.)真实场景
		2. (Reproducibility.)再现性
	   所有的协议都需要在相同的条件下运行，恒温，进制人员走动，产生可重复的干扰模式
		3. (Hardware-neutral comparisons.)硬件-中立 比较，就是确定统一的硬件平台--TelosB
		4. (No limitation on competing solutions.)不限制竞赛中所使用的协议
		不要求参赛者公开源代码，只提供最终的应用程序固件
		5. (Unobtrusive measurements.)非侵入式测试，禁用会影响协议性能的串行测试例如printf
		5. (On-site protocol parametrization.)现场协议参数化，参赛者在两天的准备阶段可以优
		化协议性能的参数，组织者以图形方式展示实时的协议性能，准备阶段后，参赛者提交协议的
		最终版本。
	Evaluation Metrics(评价标准)
		关注三种可靠性属性：可靠性、及时性和可用性
		1. 可靠性用错过或错误报道的事件的数量来衡量而非测量那些被回收或丢失的数据包。
		2. 及时性用端到端的延迟来衡量。
		3. 可用性用功率效率来表示，显然耗电量会影响系统的寿命。
	Requirements for the Benchmarking Infrastructure.(基准测试设施要求)
		本质就是需要一个增强的测试床
		1. Accurate power profiling.(精确的功率分析)，大范围内传感器节点电压电流的精确测试
		由于基于软件的功耗估算不够准确，所以需要进行硬件测量，而且针对切换信道、处理器休眠
		等短时间事件带来的功耗变化，为了正确捕捉功耗变化要求测试设备以高频率对电流电压进行
		采样。
		2. Latency profiling.(延迟分析)，鉴于有效载荷大小或处理器使用率的微小差异可能会导致
		几微秒量级的差异，基准测试基础架构还需要提供手段来测量微秒级别的节点之间的端到端延迟。
		另一个要求是大范围的通用时间基准，因为基础设施可以跨越建筑物的不同楼层并且跨越很远的
		距离（例如，当与配备有远程无线电的IoT平台一起使用时）。 此外，应该获得通用时间参考，
		而不会在参赛者使用的频带中产生通信量。
		3. Event detection.(事件检测)能够自动启动和终止实验，并读取目标平台的一些GPIO引脚，
		以便将逻辑级变更与特定事件相关联。
		4. Real-time visualization.(实时可视化)，协议的三个评价标准的实时可视化。
		5. Open-source design.(开源设计)，该赛事将成为一系列赛事并且设计将保持开源。
		6. Hardware agnostic.(硬件不可知论)，不局限与某一硬件平台。
		7. Evolvability.(进化能力)，测试床的模块化设计以及具备可升级性。
		8. Affordability.(负担能力)，成本要低，使得大规模部署能够负担得起。
		
四、D-Cube: Design and Implementation.(设计和实施)
	现有测试床不满足以上8点要求，为了举办比赛，设计的这个测试床要能够使用高速时间戳记录事件，
	并提供定制性能指标的实时可视化。同时成本也低至50欧元。
	1. Architecture.(体系结构)
	   Target nodes. 
	   运行代码的目标节点为TelosB replicas，且禁用UART接口以确保公平，D-Cube使用USB与其连接
	   为其提供电源以及对其进行编程。
	   
	   Observer modules. 
	   每个目标节点都与一个执行延迟分析，功耗分析和GPIO跟踪的观察器模块关
	   联。 观察员模块由几个部分组成，如图1（b）所示。 处理单元的核心是处理单元，该单元用于
	   调度测量，汇总数据并将收集的信息转发到数据库进行永久存储。 观察器模块不直接与其关联的
	   目标节点交互：它只监视GPIO和复位引脚，并被动地测量功耗。 在我们的原型实现中，我们采用
	   了模型B的Raspberry Pi 2（RPi2），并使用其板载100 Mb / s以太网接口连接到网络以实现NTP同
	   步，并访问时间序列数据库服务器（参见图2）。图1（a））。
	   为了准确地描绘延迟，观察者嵌入一个GPS单元为外部触发的事件生成精确的时间戳。在我们的原
	   型实现中，这项任务由Navspark-GL设备执行[1]。后者具有外部触发输入，支持上升沿或下降沿的
	   精确时间戳。为了检测它们，我们将Navspark-GL与边缘检测器一起使用。
	   为了精确分析功率，观察器模块需要同时捕获电压和电流。 观察器模块的捕获单元由通过SPI连接到
	   处理单元的ADC组成。在我们的原型实现中，我们采用德州仪器LMP92064，一个同步采样125 kSps 
	   12位电流和电压监视器。观察者处理单元上的实时过程通过SPI读取ADC值，并将它们写入FIFO队列
	   以供用户空间任务进一步处理。
	   为了精确分析功率，观察器模块需要同时捕获电压和电流。 观察器模块的捕获单元由通过SPI连接到
	   处理单元的ADC组成。 在我们的原型实现中，我们采用德州仪器LMP92064，一个同步采样125 kSps 
	   12位电流和电压监视器。 观察者处理单元上的实时过程通过SPI读取ADC值，并将它们写入FIFO队列以
	   供用户空间任务进一步处理。
	   实时任务还通过记录目标节点的GPIO引脚状态来处理GPIO跟踪。 GPIO跟踪单元还用于通过监视目标节
	   点的复位引脚来确定测量的开始和结束。 在目标节点的GPIO引脚与观察器模块的GPIO引脚之间使用光
	   电耦合器作为隔离层可确保无偏能量测量。
	   观察者设计的一个关键优势是测量单位保持相互独立。 这意味着可以断开模块（例如，如果目标节点
	   不产生或捕获任何事件，则用于延迟分析的GPS单元可以被省略），并且可以添加额外的测量单元（例
	   如，用于采样温度）而不影响 观察员软件。 实际上，每个测量单位可以分为单独的用户空间处理。
	   
	   Time series database.(时间序列数据库)
	   所有观察员收集的数据都被永久保存在时间序列数据库中。 与传统的SQL数据库不同，后者没有表和
	   键，但使用由度量组成的系列。 这些由包含测量值（例如，ADC电压）的字段和将给定测量标记为属
	   于特定类别（因此增强和简化统计分析）的标签组成。 由于GPS模块以毫微秒精度返回时间戳，因此
	   数据库需要处理纳秒时间序列的能力。 在我们的原型实现中，我们采用了InfluxDB，这是一个开源时
	   间序列数据库，针对时间序列数据的快速，高可用性存储和检索进行了优化。
	   
	   User interface.(用户界面)
	   为了支持开发人员提供有关其协议性能的实时信息，用户界面从数据库中提取信息并以图形方式显示。
	   可以为每个目标节点显示详细信息，并可以计算统计数据以总结正在运行的系统的性能。 用户可以
	   自主组合和显示具有特定特性的所有传感器的测量结果。 在我们的原型实现中，我们使用了Grafana，
	   这是一个开源的通用仪表板和图形编辑器，它构建在JavaScript之上，并作为Web应用程序运行。 
	   Grafana允许客户端呈现，并嵌入一个完整的套件用于用户管理，包括轻量级目录访问协议（LDAP）
	   集成。 除此之外，它还充当代理，防止未经授权访问底层数据库。
	   
	2. Profiling Power Consumption.(功耗分析) 
	   为了以足够高的速度来分析目标节点的功耗，以检测短暂的无线电事件，例如清除信道评估以及在低功
	   耗和活动CPU模式之间切换，我们使用高精度双通道ADC，允许同时采样电压和当前。对于电流通道，需
	   要放大器，因为典型电流分流器（≤1 W）上的电压降非常小（≤100 mV）。对于这项任务，通常使用电
	   流检测放大器 - 具有固定或可变增益的专用放大器。在我们的原型中，我们选择了现成的组件，即德
	   州仪器的LMP92064EVM。它由一个带一个电压和一个电流通道的12位ADC组成，集成电流检测放大器的固
	   定增益为25.该组件还嵌入两个电平转换器和隔离器，因为集成电路工作在5V，而处理单元（ RPi2）具
	   有3.3V逻辑电平。我们将分压器和电流分流器配置为适合我们目标节点的值。我们将最大电流限制为
	   150mA，最大电压限制为10V，这使我们能够测量电压和电流的微小差异。我们使用RPi2处理单元对高频
	   （62.5 kHz）的电压和电流进行采样。为了在一个固定的时间内执行测量任务，我们使用Linux Kernel
	   的实时补丁集，它可以为数据采集隔离一个内核。
	   
	3. Profiling End-to-End Latency.

	
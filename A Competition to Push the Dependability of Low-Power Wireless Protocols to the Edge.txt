Abstract
	1. D-Cube：低成本可靠性测量工具，如端到端延迟、可靠性、功耗以及图形化的展示其实时变化。

一、Introduction
	1. 因为低功耗无线传感器网络对网络有可靠性要求，同时希望尽可能的减少传输数据损耗与能源
	   损耗，进行这一研究就很有必要。
	2. 实验对象为Inriya或TWIST这类大型测试床 (试验床)
	3. Same testbed =/> comparable results. (相同的测试床无法获得可比较的结果)
	   同一测试床可能因为种种因素导致不同的测试结果
	4. Same setup =/> fair comparison. (相同的设置无法获得公平的比较)
	   相同的设置因为不同操作系统以及参数过程的细微差别导
	   致不同的结果
	5. Detailed logs =/> accurate metrics. (详细的日志无法获得准确的指标)
	  (1) 测试层的日志消息通常不会在亚毫秒级别上有时间戳，因此不能用于精确地配置延迟
	  (2) 日志消息是使用printf指令生成的，它可能会改变协议的时间行为，并破坏协议的功能
	6. Performing protocol =/> dependable system. (执行协议并不意味着可靠的系统)
	  (1) 应用场景：
		  本文介绍了EWSN 2016可靠性竞赛的执行情况和结果，该竞赛旨在通过无线电干扰来衡量
		  最先进的物联网协议的可靠性。我们定义了一个场景，它模拟了传感器网络在工业环境中监
		  控离散事件的操作，在这个场景中，多个共存的无线设备都聚集在射频频谱上，并且评估了
		  竞赛协议如何可靠、及时和高效地向汇聚节点报告这些事件的发生。竞赛的物联网协议是基
		  于各种技术，包括自适应和延时跳频到多模式路由和洪水，并被选在最先进的技术中。
	  (2) 为了增加公平性和真实性，我们允许竞赛协议的开发人员与基准基础设施交互，并为特定
		   的应用程序场景优化协议参数。
	  (3) D-Cube使用现成组件搭建，它允许准确配置一个设备的功耗，可以确保端到端的延迟在亚微秒
		  级别，并检测特定事件的发生。
	7. 这篇论文的收益如下。第2节讨论了该地区的相关工作。第3节概述了竞赛的目标，并描述了评估
	   指标，以及必要的基准基础设施的需求。我们通过设计D-Cube来解决这些需求，并描述其在第4节
	   中的架构和实现，并评估其在第5节中的准确性。我们描述了EWSN 2016可靠性竞赛的执行情况以及
	   它在第6节中的结果，并讨论了所获得的经验教训。最后，我们总结全文，并简要概述了今后的研究工作。
   
二、Related Work
	1. 其它测试床存在针对协议具有局限性、没能考虑环境影响或者成本过高的问题
	
三、Competition:Overview
	在相同的设置和环境条件下，对不同协议的性能进行评估
	Goals(测试目标)
		创建一个无偏的设置，任何协议都可以在相同的可重现条件下运行
		1. (Realistic scenario.)真实场景
		2. (Reproducibility.)再现性
	   所有的协议都需要在相同的条件下运行，恒温，进制人员走动，产生可重复的干扰模式
		3. (Hardware-neutral comparisons.)硬件-中立 比较，就是确定统一的硬件平台--TelosB
		4. (No limitation on competing solutions.)不限制竞赛中所使用的协议
		不要求参赛者公开源代码，只提供最终的应用程序固件
		5. (Unobtrusive measurements.)非侵入式测试，禁用会影响协议性能的串行测试例如printf
		5. (On-site protocol parametrization.)现场协议参数化，参赛者在两天的准备阶段可以优
		化协议性能的参数，组织者以图形方式展示实时的协议性能，准备阶段后，参赛者提交协议的
		最终版本。
	Evaluation Metrics(评价标准)
		关注三种可靠性属性：可靠性、及时性和可用性
		1. 可靠性用错过或错误报道的事件的数量来衡量而非测量那些被回收或丢失的数据包。
		2. 及时性用端到端的延迟来衡量。
		3. 可用性用功率效率来表示，显然耗电量会影响系统的寿命。
	Requirements for the Benchmarking Infrastructure.(基准测试设施要求)
		本质就是需要一个增强的测试床
		1. Accurate power profiling.(精确的功率分析)，大范围内传感器节点电压电流的精确测试
		由于基于软件的功耗估算不够准确，所以需要进行硬件测量，而且针对切换信道、处理器休眠
		等短时间事件带来的功耗变化，为了正确捕捉功耗变化要求测试设备以高频率对电流电压进行
		采样。
		2. Latency profiling.(延迟分析)，鉴于有效载荷大小或处理器使用率的微小差异可能会导致
		几微秒量级的差异，基准测试基础架构还需要提供手段来测量微秒级别的节点之间的端到端延迟。
		另一个要求是大范围的通用时间基准，因为基础设施可以跨越建筑物的不同楼层并且跨越很远的
		距离（例如，当与配备有远程无线电的IoT平台一起使用时）。 此外，应该获得通用时间参考，
		而不会在参赛者使用的频带中产生通信量。
		3. Event detection.(事件检测)能够自动启动和终止实验，并读取目标平台的一些GPIO引脚，
		以便将逻辑级变更与特定事件相关联。
		4. Real-time visualization.(实时可视化)，协议的三个评价标准的实时可视化。
		5. Open-source design.(开源设计)，该赛事将成为一系列赛事并且设计将保持开源。
		6. Hardware agnostic.(硬件不可知论)，不局限与某一硬件平台。
		7. Evolvability.(进化能力)，测试床的模块化设计以及具备可升级性。
		8. Affordability.(负担能力)，成本要低，使得大规模部署能够负担得起。
		
四、D-Cube: Design and Implementation.(设计和实施)
	现有测试床不满足以上8点要求，为了举办竞赛，设计的这个测试床要能够使用高速时间戳记录事件，
	并提供定制性能指标的实时可视化。同时成本也低至50欧元。
	1. Architecture.(体系结构)
	   Target nodes. 
	   运行代码的目标节点为TelosB replicas，且禁用UART接口以确保公平，D-Cube使用USB与其连接
	   为其提供电源以及对其进行编程。
	   
	   Observer modules. 
	   每个目标节点都与一个执行延迟分析，功耗分析和GPIO跟踪的观察器模块关
	   联。 观察员模块由几个部分组成，如图1（b）所示。 处理单元的核心是处理单元，该单元用于
	   调度测量，汇总数据并将收集的信息转发到数据库进行永久存储。 观察器模块不直接与其关联的
	   目标节点交互：它只监视GPIO和复位引脚，并被动地测量功耗。 在我们的原型实现中，我们采用
	   了模型B的Raspberry Pi 2（RPi2），并使用其板载100 Mb / s以太网接口连接到网络以实现NTP同
	   步，并访问时间序列数据库服务器（参见图2）。图1（a））。
	   为了准确地描绘延迟，观察者嵌入一个GPS单元为外部触发的事件生成精确的时间戳。在我们的原
	   型实现中，这项任务由Navspark-GL设备执行[1]。后者具有外部触发输入，支持上升沿或下降沿的
	   精确时间戳。为了检测它们，我们将Navspark-GL与边缘检测器一起使用。
	   为了精确分析功率，观察器模块需要同时捕获电压和电流。 观察器模块的捕获单元由通过SPI连接到
	   处理单元的ADC组成。在我们的原型实现中，我们采用德州仪器LMP92064，一个同步采样125 kSps 
	   12位电流和电压监视器。观察者处理单元上的实时过程通过SPI读取ADC值，并将它们写入FIFO队列
	   以供用户空间任务进一步处理。
	   为了精确分析功率，观察器模块需要同时捕获电压和电流。 观察器模块的捕获单元由通过SPI连接到
	   处理单元的ADC组成。 在我们的原型实现中，我们采用德州仪器LMP92064，一个同步采样125 kSps 
	   12位电流和电压监视器。 观察者处理单元上的实时过程通过SPI读取ADC值，并将它们写入FIFO队列以
	   供用户空间任务进一步处理。
	   实时任务还通过记录目标节点的GPIO引脚状态来处理GPIO跟踪。 GPIO跟踪单元还用于通过监视目标节
	   点的复位引脚来确定测量的开始和结束。 在目标节点的GPIO引脚与观察器模块的GPIO引脚之间使用光
	   电耦合器作为隔离层可确保无偏能量测量。
	   观察者设计的一个关键优势是测量单位保持相互独立。 这意味着可以断开模块（例如，如果目标节点
	   不产生或捕获任何事件，则用于延迟分析的GPS单元可以被省略），并且可以添加额外的测量单元（例
	   如，用于采样温度）而不影响 观察员软件。 实际上，每个测量单位可以分为单独的用户空间处理。
	   
	   Time series database.(时间序列数据库)
	   所有观察员收集的数据都被永久保存在时间序列数据库中。 与传统的SQL数据库不同，后者没有表和
	   键，但使用由度量组成的系列。 这些由包含测量值（例如，ADC电压）的字段和将给定测量标记为属
	   于特定类别（因此增强和简化统计分析）的标签组成。 由于GPS模块以毫微秒精度返回时间戳，因此
	   数据库需要处理纳秒时间序列的能力。 在我们的原型实现中，我们采用了InfluxDB，这是一个开源时
	   间序列数据库，针对时间序列数据的快速，高可用性存储和检索进行了优化。
	   
	   User interface.(用户界面)
	   为了支持开发人员提供有关其协议性能的实时信息，用户界面从数据库中提取信息并以图形方式显示。
	   可以为每个目标节点显示详细信息，并可以计算统计数据以总结正在运行的系统的性能。 用户可以
	   自主组合和显示具有特定特性的所有传感器的测量结果。 在我们的原型实现中，我们使用了Grafana，
	   这是一个开源的通用仪表板和图形编辑器，它构建在JavaScript之上，并作为Web应用程序运行。 
	   Grafana允许客户端呈现，并嵌入一个完整的套件用于用户管理，包括轻量级目录访问协议（LDAP）
	   集成。 除此之外，它还充当代理，防止未经授权访问底层数据库。
	   
	2. Profiling Power Consumption.(功耗分析) 
	   为了以足够高的速度来分析目标节点的功耗，以检测短暂的无线电事件，例如清除信道评估以及在低功
	   耗和活动CPU模式之间切换，我们使用高精度双通道ADC，允许同时采样电压和当前。对于电流通道，需
	   要放大器，因为典型电流分流器（≤1 W）上的电压降非常小（≤100 mV）。对于这项任务，通常使用电
	   流检测放大器 - 具有固定或可变增益的专用放大器。在我们的原型中，我们选择了现成的组件，即德
	   州仪器的LMP92064EVM。它由一个带一个电压和一个电流通道的12位ADC组成，集成电流检测放大器的固
	   定增益为25.该组件还嵌入两个电平转换器和隔离器，因为集成电路工作在5V，而处理单元（ RPi2）具
	   有3.3V逻辑电平。我们将分压器和电流分流器配置为适合我们目标节点的值。我们将最大电流限制为
	   150mA，最大电压限制为10V，这使我们能够测量电压和电流的微小差异。我们使用RPi2处理单元对高频
	   （62.5 kHz）的电压和电流进行采样。为了在一个固定的时间内执行测量任务，我们使用Linux Kernel
	   的实时补丁集，它可以为数据采集隔离一个内核。
	   
	3. Profiling End-to-End Latency.(端到端延迟分析)
	   为了剖析延迟，需要一个高度准确和同步的时间戳。 虽然有很多方法可以实现这一目标，但只有少数选
	   项可用于大规模安装。 通过同轴电缆网络传输的传统同步脉冲是不切实际且昂贵的，因为它需要校准。 
	   在[37]中使用在FPGA上实现的无线电模块和PLL也不是一个可行的选择。 由于D-Cube通过设计对所采用的
	   目标节点不可知，因此它不得使用可供目标节点用于通信的频带，因为这会偏见基准测试结果。 在D-Cube
	   中，我们利用GPS来测量事件的时间，因为几乎没有基础设施需要获得亚微秒同步。
	   在我们的原型中，我们选择了Navspark-GL，一款价格为25美元的现成组件，提供支持时间戳的外部触发输
	   入。 由于NavsparkGL只能为上升沿或下降沿创建时间戳，因此我们将其与边沿检测器（由异或门和RC低通
	   滤波器组成）一起运行，只要输入信号发生变化就会产生一个短脉冲。 Navspark-GL的Leon3处理器上的中
	   断服务程序会在边沿检测器之前检查GPIO引脚的电平，并将逻辑电平和时间戳写入通过UART传输到RPi2的
	   FIFO队列中。
	   但是使用GPS方案的局限性在于它需要晴好的天气(天空能见度高)才能正常运行，要求GPS模块放置在窗口
	   (竞赛中设置的情况就是如此，其中节点生成和捕捉事件靠近窗口并且可以接收适当的GPS信号)。
	   
	4. Capturing GPIO Events.(捕获GPIO事件)
	   在我们的实现中，为方便起见，观察器模块以与用于执行功率分析的实时过程相同的速度检查和复位RPi2
	   的边沿检测标志，即它以62.5 kHz的频率对GPIO事件进行采样 （每16μs一个样本）。 这足以在我们预想
	   的情况下高速检测事件。 如有必要，通过为此任务使用一个专用CPU内核，可将采样率进一步提高两个数
	   量级。
	   
	5. Minimizing the Observer Costs.(最大限度降低成本)

五、D-Cube Validation.(D-Cube验证)
    在本节中，我们通过实验评估D-Cube如何准确衡量感兴趣的三个评估指标及其作为竞赛对手基准设施的适用性。 
	尤其是，我们在5.1和5.2节中评估D-Cube观察器模块在分析功率和等待时间时的准确性。然后，在5.3节中我们
	评估D-Cube的实时可视化组件的响应速度。
	
	1. Profiling End-to-End Latency.
	   为了评估D-Cube如何准确测量较大物体的端到端延迟，我们将不同观察模块的Navspark-GL的输入触发连接到
	   相同的触发事件并测量时间偏差。
	   
	   Experimental setup.(实验装置)
	   我们建立了一个实验，其中三个观测器模块的Navspark-GL的输入触发引脚并联到STM32F103微控制器的同一
	   输出。 然后，我们将后者配置为产生频率为1 Hz的PWM信号，并让每个Navspark利用内置的时间戳功能在UART
	   上以纳秒为单位输出完整的时间戳。 我们记录每个观察者模块的输出，直到收集到数千个“上升”时间戳事件
	   并多次重复实验。
	   
	   Accuracy of synchronization.(同步的准确性)
	   图2显示了三个观察者模块的成对误差。 正如预期的那样，GPS模块的时间同步处于亚微秒级别。 大约95％的
	   时间戳事件相差仅±250ns（图中以灰色叠加显示）。
	
	2. Profiling Power Consumption.(功耗分析)
	   我们测量了D-Cube的观察器模块如何通过将其测量结果与使用专业设备获得的测量结果进行比较来分析功耗，
	   并评估可实现的采样率。
	   
	   Experimental setup.(实验装置)
	   我们采用Advanticsys MTMCM5000-MSP节点（TelosB副本）作为目标，并使用D-Cube的观察器模块和Keysight
	   MSO-S 254A混合信号示波器测量其功耗。我们创建了一个实验装置，如图3（a）所示，其中使用示波器在一个
	   通道上使用N2821A 3MHz / 50uA高灵敏度AC / DC电流探头测量目标节点的电流，使用常规电压探索另一个渠
	   道。同时，我们将目标节点连接到D-Cube的观察器模块，并以62.5 kHz的频率对电流和电压进行采样。然后，
	   我们使用Contiki [14]创建一个测试应用程序，在预定义的时间段（例如，LED，GPIO引脚，无线电接收模式
	   和CPU处于活动模式）打开和关闭目标节点的各个组件。图3（b）显示了所采用的模式：每个组件开启一秒，
	   空闲状态（CPU在低功耗模式下运行）交替每次改变。该模式会随着时间的推移而重复。为了能够精确测量测
	   试模式不同状态下节点的功耗，我们禁用了FTDI，因为它的功耗并不是恒定的。除此设置之外，我们重复实验
	   ，使用Energest（Contiki的基于软件的能量估算[15]）的FTDI打印估算的功耗。
	   
	   Accuracy of power measurements.(功率测量的精度)
	   图4显示了使用不同工具测量的功耗和电流消耗。与我们的参考示波器相比，Energest低估了目前的消费量约
	   9.9％，而D-Cube的观察员高估了3.6％。请注意，示波器和观察器模块测量的所有电流已被抵消了1.6 mA，以
	   补偿板载光耦合器的持续消耗，并提供与Energest更公平的比较。观察器模块测得的电压与示波器测得的电压
	   仅有-0.84％不同。当无线电设备打开时，电压也足够稳定以观察50mV的下降，并且在其余状态下变化低于10mV
	   。使用Energest的图4所示的功耗通过将估计的电流消耗乘以5V（恒定的USB电压）来计算。图4（b）显示了每
	   种状态下功耗的细分。当GPIO引脚处于活动状态时，可以观察到最显着的差异，因为Energest的当前实现无法
	   解释其消耗。
	   
	   Sampling frequency.(采样频率)
	   使用上述相同的设置，我们也评估观察者模块的采样率的稳定性。 无论何时从ADC检索新样本，我们都会以纳
	   秒级精度使用RPi2记录的Linux时间戳，并计算连续样本之间的延迟。 对于本实验，我们配置62.5 kHz的采样
	   率，因此我们期望两个采样间隔16μs。 图5显示了采样率的稳定性：在99.14％的情况下，两个连续的ADC采样
	   间隔16μs。 这意味着我们的原型采用单面PCB，并且在SPI线上没有屏蔽，确实能够以高达62.5 kHz的频率（
	   电压和电流同时采样）对功耗进行精确采样。
	   
	3. Timeliness of the GUI.(GUI的及时性)
	   D-Cube用户界面显示被测系统性能的响应性受到两个因素的限制：（i）所选时间序列数据库在提供查询时的速
	   度，以及（ii）GUI的刷新率。 在我们的案例中，InfluxDB实时回答查询，每个数据点在进入时被索引，并立
	   即在不到100毫秒内提供。 相反，Grafana中的实时可视化默认使用周期性刷新间隔1秒来实现，即软件会自动
	   每秒钟从InfluxDB重新加载数据。
	   
六、Competition: Results and Lessons Learned.(竞赛的结果与经验教训)
	我们使用D-Cube来设置所需的基准测试基础架构并运行EWSN 2016可靠性竞赛。 在描述竞赛设置（第6.1节）之后，
	我们列出竞赛协议（第6.2节），研究它们的性能（第6.3节），并讨论在第六节中学到的经验教训（第6.4节）。

	1. Setup
	我们在格拉茨技术大学的一座大楼举办竞赛，在大约150平方米的区域内部署了45个无线传感器节点。 我们选择
	Advanticsys MTM-5000传感器节点（TelosB副本）作为目标，并使用JamLab [5]选择其中的一部分以在多个通道上
	生成射频干扰。 所有其余的节点都由D-Cube的观察者监测，这些观察者随时间推移分析其功耗。
	其中一个目标节点放置在光源附近，并使用嵌入式光传感器监视其亮度。 照明条件中的任何突然变化都需要立即
	传达给汇聚节点，从而相应地触发其I / O引脚之一。 宿节点不在感知节点的通信范围内，并且周围有其他转发节
	点可用于以多跳方式到达宿（至少需要三跳）。 光源是一个目标节点连接到一个明亮的LED，根据秘密日程安排关
	闭和开启（所有参赛者都一样）。 未公开节点标识和位置以避免工程解决方案，但可以从闪存读取节点的唯一ID
	。图6（a）概述了竞赛设置。
	
	    Evaluation metrics.(评估指标)
		采用D-Cube，第一个可靠性度量，即时性被测量为照明条件中的每个变化被报告给接收器的延迟。 为此，我们
		使用D-Cube的观察器模块对控制光源的节点上的灯光变化以及汇聚节点的GIO2引脚上的变化进行时间标记。可用
		性与所有观察者模块通过网络测量的功耗成反比。 最后，将可靠性计算为正确报告到接收器的光线变化的百分比。
		
		User interface.(用户界面)
		在为期两天的准备阶段中，竞赛协议的开发人员可以通过远程连接D-Cube的用户界面来监控协议的性能并优化参数
		。参赛者可以看到对方的表现，如我们将在接下来的章节中看到的那样，可以帮助他们将解决方案的可靠性推到极
		限。图6（b）示出了实时显示协议性能的用户界面的屏幕截图。
		
		Final benchmarking.(最终基准测试)
		在两个准备日之后，所有参赛者都被要求提供一个最终固件，以便在竞赛当天用于基准测试。 后者包括一系列每
		次35分钟的实验，在此期间，JamLab越来越多地在整个2.4 GHz频段产生干扰，模拟出几个共存的Wi-Fi网络。 该
		地区的所有Wi-Fi接入点都被禁用，我们确保使用射频扫描仪，该区域不存在其他干扰设备。
	
	2. Benchmarked Protocols.(基准协议)
	使用这种设置，我们对11个团队开发的协议的性能进行了基准测试，这些协议对公开征集竞赛对手进行了回答 他们的
	解决方案从自适应和时隙跳频到多模式路由和泛洪。 由于空间的限制，我们将研究重点放在六种代表性的协议上，这
	些协议从竞赛中获得的详细技术描述和最佳表现中选择。
	
		Enhanced ContikiMAC.(增强的ContikiMAC.)
		ContikiMAC [13]是Contiki的默认职责循环MAC协议。 我们对ContikiMAC的一个版本进行了基准测试，该版本使用
		了复杂的CCA机制，减少了虚假唤醒次数，并最大限度地提高了能源效率[32]。 与增强的ContikiMAC版本（如MiCMAC
		[44]）不同，此版本在单个通道上运行。
		
		Thompson-sampling based channel selection.(基于汤普森采样的通道选择)
		这个协议在Contiki中实现了一个动态选择三个通道中最好的解决方案。 要使用的信道是通过使用汤普森采样解决
		multi-arm bandit问题来选择的，这可以使获得良好估计所需的采样数量最小[40]。
		
		Glossy.(光滑) 
		Glossy [21]一直是无线传感器网络的一种有影响力的泛洪体系结构，它利用IEEE 802.15.4符号的建设性干扰实现
		快速网络泛洪和隐式时间同步。 基准协议是带有信道跳变的Glossy的扩展版本，其中用于每个通信时隙的信道来自
		中继计数器和分组序列号[49]。
		
		Chaos.(混沌)
		混沌[35]是不同数据包的全部数据共享的基本原理。 受益于Glossy的全面泛滥，混沌通过在同步传输和用户定义的
		合并操作符的基础上并行化网络内的收集，处理和传播。 基准协议是混沌的扩展版本，增加了频道不佳和频道不佳
		的黑名单[2]。
		
		Sparkle.(火花)
		基于Glossy，Sparkle [54]构建了一个多环控制网络，该网络基于运行时反馈控制每个端到端流。 它采用捕获效应
		来在源和目的地之间找到许多可靠的路径，并激活这些路径中的一个或多个路径上的节点[53]。
		
		Time-slotted Channel Hopping.(时隙跳频)hopping
		我们还基于在中等接入控制层面使用时隙信道跳频的TSCH / 6TiSCH [26]的OpenWSN开源实现和在路由层面使用受控
		泛洪的RPL进行基准测试。
		
	3. Results.
		图7显示了竞赛日期间基准协议的可靠性，及时性和可用性。
		
		Flooding pays off.(洪泛回报)
		(洪泛不要求维护网络的拓扑结构和相关的路由计算，仅要求接收到信息的节点以广播方式转发数据包)
		一个明显的结果是，使用泛洪的解决方案是在所有三个指标中表现最好的解决方案。 尽管预计洪泛将端到端延迟降
		至最低，但通常由于传输数量增加和无线电活动增加，通常认为这会导致整个网络的能源消耗显着增加。 竞赛结果
		表明，泛洪协议与标准路由方法相比具有可比较的能耗。
		
		Hopping is a necessity.(跳跃是必需的)
		尽管没有任何竞赛协议能够实现完美的100％端到端可靠性，但是依赖于整个频段上的信道跳频和其他解决方案的解
		决方案之间有明确的分界线。 在我们测试的六个协议中，Sparkle，Chaos，Glossy和TSCH实现了更高的可靠性和时
		效性。 以单通道运行的ContikiMAC的可靠性最低（69.1％），平均端到端延迟最高（1.4秒），这可能是由于尝试
		访问介质的失败次数较多。 基于汤普森采样的信道选择使用三个信道池，将可靠性提高了7％，并将端到端延迟降
		低了200 ms。 其他四种协议在整个频段上跳转，能够将可靠性提高到99.2％。
		
		New-generation protocols are reliable and timely.(新一代协议是可靠和及时的)
		另一个明显的结果是，结合最先进的技术（如相长干扰，洪泛和（时隙）跳频）的新一代协议即使在高干扰和推动
		的情况下也可以保持95％以上的可靠性 对于至少3跳的网络，端到端延迟要远低于150毫秒 - 性能接近安全关键型
		应用的要求
		
		Over-optimizing may be fatal.(过度优化可能是致命的)
		选择牺牲多少能量来实现特权的及时性和可靠性是众所周知的难题之一。 参赛者不得不面对这个问题，这是因为他
		们意识到对方的表现并努力争取胜利。 这导致参赛者将其协议的表现推向边缘，试图获得甚至是最小的收益，从而
		让他们击败另一种解决方案。 然而，竞赛已经清楚地表明，度量的最小改进会使另一个度量的性能恶化几乎两倍。
		通过比较图7和图8可以看出一个例子：TSCH在准备期间表现出与其他前三种方案相当的性能，并试图积极地优化其
		最弱点（及时性）。 然而，这导致在竞赛日期间，与所有其他协议相比，能耗急剧增加。
	
	4. Lessons Learned.(经验教训)
		接下来我们总结了在竞赛准备和执行过程中学到的经验教训。
		
		Competitions trigger major advances.(竞赛引发重大进展)
		在竞赛中最好的解决方案能够在至少三跳的网络内正确捕获95％以上的端到端时延低于75毫秒的事件。考虑到产生
		的极端环境条件（所有频率信道中的无线电干扰严重），这是一个非常显着的结果，可以满足安全关键型应用的要求。
		毫无疑问，竞赛的本质促成了这一结果，人们竞相争取到深夜争取胜利。
		
		Live feedback to participants.(向参与者提供实时反馈)
		D-Cube能够实时地以图形化方式显示协议的性能，这也是促成竞赛成功的一个方面。 我们希望此功能成为公共测试平
		台和未来基准测试套件的标准功能。
		
		The importance of proper parametrization.(恰当的参数化的重要性)
		正如在Sect。 1，基准测试不同协议时的常见做法是依赖于默认设置。 竞赛表明，仅通过优化协议参数来适应手头的
		情况，一些系统的性能可以显着提高，而不会影响三个可靠性度量标准中的任何一个。 图9显示了一个例子，它描述了
		竞赛日期TSCH的性能以及连续实验中三个可靠性度量的演变。 只有七次测试运行，TSCH开发人员可以将延迟降低20％，
		能耗降低45％，而不会影响其系统的端对端可靠性。
		
		Impact of the operating system.(操作系统的影响)
		源自竞赛的另一个重要观察结果是，在这些设置中竞赛的协议的性能通常仅受底层操作系统的最小影响。不过，我们还
		了解到，对操作系统的默认设置进行基准测试并查找任何大的差异是非常重要的。预期值。在比较使用两种最流行的物
		联网设备，Contiki和TinyOS操作系统的同一应用程序的性能时，我们的确观察到能耗差别很大。如图10所示，TinyOS
		在运行相同应用（≈37mA以上）时比Contiki显示出更高的能耗。造成这种差异的原因是由于GPIO引脚的默认配置。实际
		上，最新版本的TinyOS的GPIO引脚默认配置为输入（不像代码初始化部分的注释中提到的那样），而是作为输出。一旦
		问题得到解决，两种操作系统的性能相当，Contiki的平均消耗量仅比Tin​​yOS多0.5 mA（见图10）。
		
七、Conclusions and Future Work.(结论和未来工作)
	在本文中，我们介绍了竞争的执行和结果，旨在基准测试在相同设置和环境条件下最先进的低功耗无线协议的端到端可靠性。
	我们专注于一个典型的工业控制场景，其中几个无线设备挤占了RF频谱，并评估了竞争协议的可靠性，及时性和能效。 为了
	创建基准测试基础设施，我们设计并实施了D-Cube，这款工具使我们能够以最小的硬件成本精确测量端到端的延迟和功耗。 
	未来的工作包括基准测试程序的完全自动化，使人们能够远程竞争而不需要举办竞赛。
	